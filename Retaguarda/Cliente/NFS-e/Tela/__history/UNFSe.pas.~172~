{ *******************************************************************************
Title: T2Ti ERP
Description: Janela NFS-e

The MIT License

Copyright: Copyright (C) 2016 T2Ti.COM

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

The author may be contacted at:
t2ti.com@gmail.com</p>

@author Albert Eije (alberteije@gmail.com)
@version 2.0
******************************************************************************* }

unit UNFSe;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, UTelaCadastro, Menus, StdCtrls, ExtCtrls, Buttons, Grids, DBGrids,
  JvExDBGrids, JvDBGrid, JvDBUltimGrid, ComCtrls, Mask, JvExMask, JvToolEdit,
  JvCombobox, LabeledCtrls, DBCtrls, LabeledDBCtrls, DB, DBClient, StrUtils,
  Math, JSonVO, Generics.Collections, Atributos, Constantes, CheckLst,
  JvExCheckLst, JvCheckListBox, JvBaseEdits, OleCtnrs, WideStrings, FMTBcd,
  Provider, SqlExpr, DBXMySql, PlatformDefaultStyleActnCtrls, ActnList, ActnMan,
  ToolWin, ActnCtrls, ShellApi, Biblioteca, System.Actions, Controller,
  ACBrNFSeDANFSeClass, ACBrNFSeDANFSeRLClass, ACBrMail, ACBrBase, ACBrDFe,
  ACBrNFSe, pnfsNFSe, pcnConversao, pnfsConversao;

type
  TFNFSe = class(TFTelaCadastro)
    ScrollBox: TScrollBox;
    EditNumeroRPS: TLabeledEdit;
    EditNumero: TLabeledEdit;
    BevelEdits: TBevel;
    PageControlDadosNFSe: TPageControl;
    tsDetalhe: TTabSheet;
    PanelDocumentacao: TPanel;
    GridDetalhe: TJvDBUltimGrid;
    tsIntermediarios: TTabSheet;
    PanelDepreciacao: TPanel;
    GridIntermediarios: TJvDBUltimGrid;
    EditIdOS: TLabeledCalcEdit;
    EditCliente: TLabeledEdit;
    CDSNFSeDetalhe: TClientDataSet;
    DSNFSeDetalhe: TDataSource;
    CDSNFSeIntermediario: TClientDataSet;
    DSNFSeIntermediario: TDataSource;
    ActionToolBarDepreciacao: TActionToolBar;
    ActionManagerBem: TActionManager;
    ActionIncluirIntermediario: TAction;
    ActionToolBar1: TActionToolBar;
    ActionEnviarRPS: TAction;
    EditCodigoVerificacao: TLabeledEdit;
    EditDataHoraEmissao: TLabeledDateEdit;
    EditCompetencia: TLabeledMaskEdit;
    EditNumeroSubstituida: TLabeledEdit;
    ComboNaturezaOperacao: TLabeledComboBox;
    ComboRegimeEspecialTributacao: TLabeledComboBox;
    ComboOptanteSimplesNacional: TLabeledComboBox;
    ComboIncentivadorCultural: TLabeledComboBox;
    EditSerieRPS: TLabeledEdit;
    ComboTipoRPS: TLabeledComboBox;
    EditDataEmissaoRPS: TLabeledDateEdit;
    EditCodigoObra: TLabeledEdit;
    EditNumeroART: TLabeledEdit;
    ACBrNFSe1: TACBrNFSe;
    ACBrMail1: TACBrMail;
    ACBrNFSeDANFSeRL1: TACBrNFSeDANFSeRL;
    ActionSelecionarItemListaServico: TAction;
    function RoundTo5(Valor: Double; Casas: Integer): Double;
    procedure FormCreate(Sender: TObject);
    procedure ActionIncluirIntermediarioExecute(Sender: TObject);
    procedure CDSNFSeDetalheAfterEdit(DataSet: TDataSet);
    procedure CDSNFSeIntermediarioAfterEdit(DataSet: TDataSet);
    procedure EditIdOSKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure GridDetalheKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure ActionEnviarRPSExecute(Sender: TObject);
    procedure ActionSelecionarItemListaServicoExecute(Sender: TObject);
    procedure ACBrNFSe1StatusChange(Sender: TObject);
  private
    { Private declarations }
    IdTipoNFSe: Integer;
  public
    { Public declarations }
    procedure GridParaEdits; override;
    procedure LimparCampos; override;

    // Controles CRUD
    function DoInserir: Boolean; override;
    function DoEditar: Boolean; override;
    function DoExcluir: Boolean; override;
    function DoSalvar: Boolean; override;

    procedure ConfigurarLayoutTela;
    procedure ConfiguraNFSe;
  end;

var
  FNFSe: TFNFSe;

implementation

uses NotificationService, NFSeCabecalhoVO, NFSeCabecalhoController, NFSeDetalheVO,
  NFSeDetalheController, NFSeIntermediarioVO, OsAberturaVO, OsAberturaController,
  ULookup, UDataModule, NfseListaServicoVO, NfseListaServicoController,
  ViewPessoaColaboradorVO, ViewPessoaColaboradorController,
  ViewPessoaFornecedorVO, ViewPessoaFornecedorController, ufrmStatus;
{$R *.dfm}

{$REGION 'Infra'}
procedure TFNFSe.FormCreate(Sender: TObject);
var
  Form: TForm;
begin
  ClasseObjetoGridVO := TNFSeCabecalhoVO;
  ObjetoController := TNFSeCabecalhoController.Create;

  inherited;

  // Configura a Grid dos itens
  ConfiguraCDSFromVO(CDSNFSeDetalhe, TNFSeDetalheVO);
  ConfiguraGridFromVO(GridDetalhe, TNFSeDetalheVO);

  ConfiguraCDSFromVO(CDSNFSeIntermediario, TNFSeIntermediarioVO);
  ConfiguraGridFromVO(GridIntermediarios, TNFSeIntermediarioVO);

  /// EXERCICIO
  ///  Carregue os dados de configurações de uma tabela no banco de dados
  ///  Observe que existe um arquivo INI com as configurações na pasta da aplicação
  ConfiguraNFSe;
end;

procedure TFNFSe.LimparCampos;
var
  i: Integer;
begin
  inherited;

  CDSNFSeDetalhe.EmptyDataSet;
  CDSNFSeIntermediario.EmptyDataSet;

  ConfigurarLayoutTela;
end;

procedure TFNFSe.ConfiguraNFSe;
var
  PathMensal: String;
begin
// {$IFDEF ACBrNFSeOpenSSL}
//   ACBrNFSe1.Configuracoes.Certificados.Certificado := edtCaminho.Text;
//   ACBrNFSe1.Configuracoes.Certificados.Senha       := edtSenha.Text;
// {$ELSE}
   ACBrNFSe1.Configuracoes.Certificados.NumeroSerie := '00d243d0';
// {$ENDIF}

// ACBrNFSe1.Configuracoes.Certificados.VerificarValidade := True;

 ACBrNFSe1.Configuracoes.Arquivos.AdicionarLiteral := True;
 ACBrNFSe1.Configuracoes.Arquivos.EmissaoPathNFSe  := True;
 ACBrNFSe1.Configuracoes.Arquivos.SepararPorMes    := True;
 ACBrNFSe1.Configuracoes.Arquivos.SepararPorCNPJ   := False;
 ACBrNFSe1.Configuracoes.Arquivos.PathGer          := 'c:\erp';
// ACBrNFSe1.Configuracoes.Arquivos.PathNFSe         := edtPathLogs.Text;
 ACBrNFSe1.Configuracoes.Arquivos.PathSchemas      := 'C:\Testes\NFSe\Schemas\BHISS';
 ACBrNFSe1.Configuracoes.Arquivos.NomeLongoNFSe    := True;

 PathMensal := ACBrNFSe1.Configuracoes.Arquivos.GetPathGer(0);

 ACBrNFSe1.Configuracoes.Arquivos.PathCan    := PathMensal;
 ACBrNFSe1.Configuracoes.Arquivos.PathSalvar := PathMensal;
 ACBrNFSe1.Configuracoes.Arquivos.Salvar     := True;

 ACBrNFSe1.Configuracoes.Geral.Salvar          := true;
 ACBrNFSe1.Configuracoes.Geral.PathIniCidades  := 'C:\Testes\NFSe\ArqINI';
 ACBrNFSe1.Configuracoes.Geral.PathIniProvedor := 'C:\Testes\NFSe\ArqINI';
 ACBrNFSe1.Configuracoes.Geral.CodigoMunicipio := StrToIntDef('3106200', 0);
 ACBrNFSe1.Configuracoes.Geral.SenhaWeb        := '1108983677';
 ACBrNFSe1.Configuracoes.Geral.UserWeb         := '10127260010';

 ACBrNFSe1.Configuracoes.Geral.Emitente.CNPJ      := Sessao.Empresa.Cnpj;
 ACBrNFSe1.Configuracoes.Geral.Emitente.InscMun   := '10127260010'; // Inscrição Municipal da T2Ti criada em Belo Horizonte apenas para testes
 ACBrNFSe1.Configuracoes.Geral.Emitente.RazSocial := Sessao.Empresa.RazaoSocial;

 ACBrNFSe1.Configuracoes.Geral.Emitente.WebUser      := '10127260010';
 ACBrNFSe1.Configuracoes.Geral.Emitente.WebSenha     := '1108983677';
 ACBrNFSe1.Configuracoes.Geral.Emitente.WebFraseSecr := '';

 ACBrNFSe1.Configuracoes.WebServices.Salvar     := true;
 ACBrNFSe1.Configuracoes.WebServices.Ambiente   := taHomologacao;
 ACBrNFSe1.Configuracoes.WebServices.Visualizar := true;
 ACBrNFSe1.Configuracoes.WebServices.ProxyHost  := '';
 ACBrNFSe1.Configuracoes.WebServices.ProxyPort  := '';
 ACBrNFSe1.Configuracoes.WebServices.ProxyUser  := '';
 ACBrNFSe1.Configuracoes.WebServices.ProxyPass  := '';
 ACBrNFSe1.Configuracoes.WebServices.UF         := 'MG';

 ACBrNFSe1.Configuracoes.Geral.SetConfigMunicipio;

 if ACBrNFSe1.DANFSe <> nil then
 begin
   ACBrNFSe1.DANFSe.Logo       := 'C:\ERP\logo.jpg';
   ACBrNFSe1.DANFSe.PrestLogo  := 'C:\ERP\logo.jpg';
   ACBrNFSe1.DANFSe.Prefeitura := 'PREFEITURA DE BELO HORIZONTE';
   ACBrNFSe1.DANFSe.PathPDF    := PathMensal;

//  TTipoDANFSE = ( tpPadrao, tpIssDSF, tpFiorilli );
   ACBrNFSe1.DANFSe.TipoDANFSE := tpPadrao;
 end;

 (*
 ACBrNFSe1.MAIL.Host     := edtSmtpHost.Text;
 ACBrNFSe1.MAIL.Port     := edtSmtpPort.Text;
 ACBrNFSe1.MAIL.Username := edtSmtpUser.Text;
 ACBrNFSe1.MAIL.Password := edtSmtpPass.Text;
 ACBrNFSe1.MAIL.From     := edtEmailRemetente.Text;
 ACBrNFSe1.MAIL.FromName := edtEmitRazao.Text;
 ACBrNFSe1.MAIL.SetTLS   := cbEmailTLS.Checked;
 ACBrNFSe1.MAIL.SetSSL   := cbEmailSSL.Checked;
 ACBrNFSe1.MAIL.UseThread   := False;
 ACBrNFSe1.MAIL.ReadingConfirmation := False;
 *)
end;

procedure TFNFSe.ConfigurarLayoutTela;
begin
  PanelEdits.Enabled := True;
  PageControlDadosNFSe.ActivePageIndex := 0;
end;
{$ENDREGION}

{$REGION 'Controles CRUD'}
function TFNFSe.DoInserir: Boolean;
begin
  Result := inherited DoInserir;

  if Result then
  begin
    EditIdOS.SetFocus;
  end;
end;

function TFNFSe.DoEditar: Boolean;
begin
  Result := inherited DoEditar;

  if Result then
  begin
    EditIdOS.SetFocus;
  end;
end;

function TFNFSe.DoExcluir: Boolean;
begin
  if inherited DoExcluir then
  begin
    try
      TController.ExecutarMetodo('NfseCabecalhoController.TNfseCabecalhoController', 'Exclui', [IdRegistroSelecionado], 'DELETE', 'Boolean');
      Result := TController.RetornoBoolean;
    except
      Result := False;
    end;
  end
  else
  begin
    Result := False;
  end;

  if Result then
    TController.ExecutarMetodo('NfseCabecalhoController.TNfseCabecalhoController', 'Consulta', [Trim(Filtro), Pagina.ToString, False], 'GET', 'Lista');
end;

function TFNFSe.DoSalvar: Boolean;
begin
  Result := inherited DoSalvar;

  if Result then
  begin
    try
      if not Assigned(ObjetoVO) then
        ObjetoVO := TNFSeCabecalhoVO.Create;

      TNFSeCabecalhoVO(ObjetoVO).IdOsAbertura := EditIdOS.AsInteger;
      TNFSeCabecalhoVO(ObjetoVO).IdCliente := StrToInt(EditCliente.Text);
      TNFSeCabecalhoVO(ObjetoVO).IdEmpresa := Sessao.Empresa.Id;
      TNFSeCabecalhoVO(ObjetoVO).Numero := EditNumero.Text;
      TNFSeCabecalhoVO(ObjetoVO).CodigoVerificacao := EditCodigoVerificacao.Text;
      TNFSeCabecalhoVO(ObjetoVO).DataHoraEmissao := EditDataHoraEmissao.Date;
      TNFSeCabecalhoVO(ObjetoVO).Competencia := EditCompetencia.Text;
      TNFSeCabecalhoVO(ObjetoVO).NumeroSubstituida := EditNumeroSubstituida.Text;
      TNFSeCabecalhoVO(ObjetoVO).NaturezaOperacao := ComboNaturezaOperacao.ItemIndex + 1;
      TNFSeCabecalhoVO(ObjetoVO).RegimeEspecialTributacao := ComboRegimeEspecialTributacao.ItemIndex + 1;
      TNFSeCabecalhoVO(ObjetoVO).OptanteSimplesNacional := Copy(ComboOptanteSimplesNacional.Text, 1, 1);
      TNFSeCabecalhoVO(ObjetoVO).IncentivadorCultural := Copy(ComboIncentivadorCultural.Text, 1, 1);
      TNFSeCabecalhoVO(ObjetoVO).NumeroRPS := EditNumeroRPS.Text;
      TNFSeCabecalhoVO(ObjetoVO).SerieRPS := EditSerieRPS.Text;
      TNFSeCabecalhoVO(ObjetoVO).TipoRPS := ComboTipoRPS.ItemIndex + 1;
      TNFSeCabecalhoVO(ObjetoVO).DataEmissaoRPS := EditDataEmissaoRPS.Date;
      TNFSeCabecalhoVO(ObjetoVO).CodigoObra := EditCodigoObra.Text;
      TNFSeCabecalhoVO(ObjetoVO).NumeroART := EditNumeroART.Text;

      // Listas
      TController.PreencherObjectListFromCDS<TNFSeDetalheVO>(TNFSeCabecalhoVO(ObjetoVO).ListaNFSeDetalheVO, CDSNFSeDetalhe);
      TController.PreencherObjectListFromCDS<TNFSeIntermediarioVO>(TNFSeCabecalhoVO(ObjetoVO).ListaNFSeIntermediarioVO, CDSNFSeIntermediario);

      if StatusTela = stInserindo then
      begin
        TController.ExecutarMetodo('NfseCabecalhoController.TNfseCabecalhoController', 'Insere', [TNFSeCabecalhoVO(ObjetoVO)], 'PUT', 'Lista');
      end
      else if StatusTela = stEditando then
      begin
        if TNFSeCabecalhoVO(ObjetoVO).ToJSONString <> StringObjetoOld then
        begin
          TController.ExecutarMetodo('NfseCabecalhoController.TNfseCabecalhoController', 'Altera', [TNFSeCabecalhoVO(ObjetoVO)], 'POST', 'Boolean');
        end
        else
          Application.MessageBox('Nenhum dado foi alterado.', 'Mensagem do Sistema', MB_OK + MB_ICONINFORMATION);
      end;
    except
      Result := False;
    end;
  end;
end;
{$ENDREGION}

{$REGION 'Campos Transientes'}
procedure TFNFSe.EditIdOSKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
var
  Filtro: String;
begin
  if Key = VK_F1 then
  begin
    if EditIdOS.Value <> 0 then
      Filtro := 'ID = ' + EditIdOS.Text
    else
      Filtro := 'ID=0';

    try
      EditIdOS.Clear;
      EditCliente.Clear;
      if not PopulaCamposTransientes(Filtro, TOsAberturaVO, TOsAberturaController) then
        PopulaCamposTransientesLookup(TOsAberturaVO, TOsAberturaController);
      if CDSTransiente.RecordCount > 0 then
      begin
        EditIdOS.Text := CDSTransiente.FieldByName('ID').AsString;
        EditCliente.Text := CDSTransiente.FieldByName('ID_CLIENTE').AsString;
      end
      else
      begin
        Exit;
        EditNumero.SetFocus;
      end;
    finally
      CDSTransiente.Close;
    end;
  end;
end;
{$ENDREGION}

{$REGION 'Controle de Grid'}
procedure TFNFSe.GridParaEdits;
begin
  inherited;

  if not CDSGrid.IsEmpty then
  begin
    ObjetoVO := TNFSeCabecalhoVO(TController.BuscarObjeto('NfseCabecalhoController.TNfseCabecalhoController', 'ConsultaObjeto', ['ID=' + IdRegistroSelecionado.ToString], 'GET'));
  end;

  if Assigned(ObjetoVO) then
  begin

    EditIdOS.AsInteger := TNFSeCabecalhoVO(ObjetoVO).IdOsAbertura;
    EditCliente.Text := IntToStr(TNFSeCabecalhoVO(ObjetoVO).IdCliente);
    EditNumero.Text := TNFSeCabecalhoVO(ObjetoVO).Numero;
    EditCodigoVerificacao.Text := TNFSeCabecalhoVO(ObjetoVO).CodigoVerificacao;
    EditDataHoraEmissao.Date := TNFSeCabecalhoVO(ObjetoVO).DataHoraEmissao;
    EditCompetencia.Text := TNFSeCabecalhoVO(ObjetoVO).Competencia;
    EditNumeroSubstituida.Text := TNFSeCabecalhoVO(ObjetoVO).NumeroSubstituida;
    ComboNaturezaOperacao.ItemIndex := TNFSeCabecalhoVO(ObjetoVO).NaturezaOperacao - 1;
    ComboRegimeEspecialTributacao.ItemIndex := TNFSeCabecalhoVO(ObjetoVO).RegimeEspecialTributacao - 1;
    EditNumeroRPS.Text := TNFSeCabecalhoVO(ObjetoVO).NumeroRPS;
    EditSerieRPS.Text := TNFSeCabecalhoVO(ObjetoVO).SerieRPS;
    ComboTipoRPS.ItemIndex := TNFSeCabecalhoVO(ObjetoVO).TipoRPS - 1;
    EditDataEmissaoRPS.Date := TNFSeCabecalhoVO(ObjetoVO).DataEmissaoRPS;
    EditCodigoObra.Text := TNFSeCabecalhoVO(ObjetoVO).CodigoObra;
    EditNumeroART.Text := TNFSeCabecalhoVO(ObjetoVO).NumeroART;

    case AnsiIndexStr(TNFSeCabecalhoVO(ObjetoVO).OptanteSimplesNacional, ['S', 'N']) of
      0:
        ComboOptanteSimplesNacional.ItemIndex := 0;
      1:
        ComboOptanteSimplesNacional.ItemIndex := 1;
    else
      ComboOptanteSimplesNacional.ItemIndex := -1;
    end;

    case AnsiIndexStr(TNFSeCabecalhoVO(ObjetoVO).IncentivadorCultural, ['S', 'N']) of
      0:
        ComboIncentivadorCultural.ItemIndex := 0;
      1:
        ComboIncentivadorCultural.ItemIndex := 1;
    else
      ComboIncentivadorCultural.ItemIndex := -1;
    end;

      TController.PreencherObjectListFromCDS<TNFSeDetalheVO>(TNFSeCabecalhoVO(ObjetoVO).ListaNFSeDetalheVO, CDSNFSeDetalhe);
      TController.PreencherObjectListFromCDS<TNFSeIntermediarioVO>(TNFSeCabecalhoVO(ObjetoVO).ListaNFSeIntermediarioVO, CDSNFSeIntermediario);

    // Preenche as grids internas com os dados das Listas que vieram no objeto
    TController.TratarRetorno<TNFSeDetalheVO>(TNFSeCabecalhoVO(ObjetoVO).ListaNFSeDetalheVO, True, True, CDSNFSeDetalhe);
    TController.TratarRetorno<TNFSeIntermediarioVO>(TNFSeCabecalhoVO(ObjetoVO).ListaNFSeIntermediarioVO, True, True, CDSNFSeIntermediario);

    // Limpa as listas para comparar posteriormente se houve inclusões/alterações e subir apenas o necessário para o servidor
    TNFSeCabecalhoVO(ObjetoVO).ListaNFSeDetalheVO.Clear;
    TNFSeCabecalhoVO(ObjetoVO).ListaNFSeIntermediarioVO.Clear;

    // Serializa o objeto para consultar posteriormente se houve alterações
    FormatSettings.DecimalSeparator := '.';
    StringObjetoOld := ObjetoVO.ToJSONString;
    FormatSettings.DecimalSeparator := ',';
  end;
end;

procedure TFNFSe.GridDetalheKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = VK_F1 then
  begin
    try
      PopulaCamposTransientesLookup(TNfseListaServicoVO, TNfseListaServicoController);
      if CDSTransiente.RecordCount > 0 then
      begin
        CDSNFSeDetalhe.Append;
        CDSNFSeDetalhe.FieldByName('ID_NFSE_LISTA_SERVICO').AsInteger := CDSTransiente.FieldByName('ID').AsInteger;
        CDSNFSeDetalhe.FieldByName('DISCRIMINACAO').AsString := 'SERVIÇO TESTE T2Ti.COM';
        CDSNFSeDetalhe.FieldByName('VALOR_SERVICOS').AsFloat := 10;
        CDSNFSeDetalhe.FieldByName('VALOR_BASE_CALCULO').AsFloat := CDSNFSeDetalhe.FieldByName('VALOR_SERVICOS').AsFloat
                                                                  - CDSNFSeDetalhe.FieldByName('VALOR_DEDUCOES').AsFloat
                                                                  - CDSNFSeDetalhe.FieldByName('VALOR_DESCONTO_INCONDICIONADO').AsFloat;
        CDSNFSeDetalhe.FieldByName('ALIQUOTA').AsFloat := 2;
        CDSNFSeDetalhe.FieldByName('VALOR_ISS').AsFloat := CDSNFSeDetalhe.FieldByName('VALOR_BASE_CALCULO').AsFloat
                                                         * CDSNFSeDetalhe.FieldByName('ALIQUOTA').AsFloat / 100;
        CDSNFSeDetalhe.Post;
      end;
    finally
      CDSTransiente.Close;
    end;
  end;
end;

procedure TFNFSe.CDSNFSeIntermediarioAfterEdit(DataSet: TDataSet);
begin
  CDSNFSeIntermediario.FieldByName('PERSISTE').AsString := 'S';
end;

procedure TFNFSe.CDSNFSeDetalheAfterEdit(DataSet: TDataSet);
begin
  CDSNFSeDetalhe.FieldByName('PERSISTE').AsString := 'S';
end;
{$ENDREGION}

{$REGION 'Actions'}
procedure TFNFSe.ActionEnviarRPSExecute(Sender: TObject);
var
  ValorISS: Double;
begin
  with ACBrNFSe1 do
  begin
    NotasFiscais.NumeroLote:='1';
    NotasFiscais.Transacao := True;

    with NotasFiscais.Add.NFSe do
    begin
      IdentificacaoRps.Numero := FormatFloat('#########0', StrToInt(EditNumeroRPS.Text));

      // Para o provedor ISS.NET em ambiente de Homologação mudar a série para '8'
      IdentificacaoRps.Serie := 'UNICA';

      // TnfseTipoRPS = ( trRPS, trNFConjugada, trCupom );
      IdentificacaoRps.Tipo := trRPS;

      DataEmissao := Now;//EditDataEmissaoRPS.Date;

      (*
      TnfseNaturezaOperacao = ( no1, no2, no3, no4, no5, no6, no7,
                                no50, no51, no52, no53, no54, no55, no56, no57, no58, no59,
                                no60, no61, no62, no63, no64, no65, no66, no67, no68, no69,
                                no70, no71, no72, no78, no79,
                                no101, no111, no121, no201, no301,
                                no501, no511, no541, no551, no601, no701 );
      *)
      NaturezaOperacao := no1;
      //    NaturezaOperacao := no51;

      // TnfseRegimeEspecialTributacao = ( retNenhum, retMicroempresaMunicipal, retEstimativa, retSociedadeProfissionais, retCooperativa, retMicroempresarioIndividual, retMicroempresarioEmpresaPP );
      //     RegimeEspecialTributacao := retNenhum;
      /// EXERCICIO
      ///  Pegue o valor do ComboRegimeEspecialTributacao
      RegimeEspecialTributacao := retEstimativa;

      // TnfseSimNao = ( snSim, snNao );
      /// EXERCICIO
      ///  Pegue o valor do ComboOptanteSimplesNacional
      OptanteSimplesNacional := snNao;

      // TnfseSimNao = ( snSim, snNao );
      /// EXERCICIO
      ///  Pegue o valor do ComboIncentivadorCultural
      IncentivadorCultural := snNao;

      // TnfseSimNao = ( snSim, snNao );
      // snSim = Ambiente de Produção
      // snNao = Ambiente de Homologação
      Producao := snNao;

      // TnfseStatusRPS = ( srNormal, srCancelado );
      Status := srNormal;

      // Somente Os provedores Betha, FISSLex e SimplISS permitem incluir no RPS
      // a TAG: OutrasInformacoes os demais essa TAG é gerada e preenchida pelo
      // WebService do provedor.
      /// EXERCICIO
      ///  Verifique a viabilidade de utilizar esse campo da tabela nfse_cabecalho
      OutrasInformacoes := 'Outras Informações T2Ti';

      // Usado quando o RPS for substituir outro
      //     RpsSubstituido.Numero := FormatFloat('#########0', i);
      //     RpsSubstituido.Serie  := 'UNICA';
      // TnfseTipoRPS = ( trRPS, trNFConjugada, trCupom );
      ///     RpsSubstituido.Tipo   := trRPS;

      Servico.Valores.ValorServicos          := CDSNFSeDetalhe.FieldByName('VALOR_SERVICOS').AsFloat;
      Servico.Valores.ValorDeducoes          := CDSNFSeDetalhe.FieldByName('VALOR_DEDUCOES').AsFloat;
      Servico.Valores.ValorPis               := CDSNFSeDetalhe.FieldByName('VALOR_PIS').AsFloat;
      Servico.Valores.ValorCofins            := CDSNFSeDetalhe.FieldByName('VALOR_COFINS').AsFloat;
      Servico.Valores.ValorInss              := CDSNFSeDetalhe.FieldByName('VALOR_INSS').AsFloat;
      Servico.Valores.ValorIr                := CDSNFSeDetalhe.FieldByName('VALOR_IR').AsFloat;
      Servico.Valores.ValorCsll              := CDSNFSeDetalhe.FieldByName('VALOR_CSLL').AsFloat;

      // TnfseSituacaoTributaria = ( stRetencao, stNormal, stSubstituicao );
      // stRetencao = snSim
      // stNormal   = snNao

      // Neste exemplo não temos ISS Retido ( stNormal = Não )
      // Logo o valor do ISS Retido é igual a zero.
      /// EXERCICIO
      ///  Verifique o campo ISS_RETIDO da tabela nfse_detalhe
      Servico.Valores.IssRetido              := stNormal;
      Servico.Valores.ValorIssRetido         := CDSNFSeDetalhe.FieldByName('VALOR_ISS_RETIDO').AsFloat;

      Servico.Valores.OutrasRetencoes        := CDSNFSeDetalhe.FieldByName('OUTRAS_RETENCOES').AsFloat;
      Servico.Valores.DescontoIncondicionado := CDSNFSeDetalhe.FieldByName('VALOR_DESCONTO_INCONDICIONADO').AsFloat;
      Servico.Valores.DescontoCondicionado   := CDSNFSeDetalhe.FieldByName('VALOR_DESCONTO_CONDICIONADO').AsFloat;

      Servico.Valores.BaseCalculo := Servico.Valores.ValorServicos -
                                     Servico.Valores.ValorDeducoes -
                                     Servico.Valores.DescontoIncondicionado;
      // No caso do provedor Ginfes devemos informar a aliquota já dividida por 100
      // para outros provedores devemos informar por exemplo 3, mas ao fazer o calculo
      // do valor do ISS devemos dividir por 100
      Servico.Valores.Aliquota    := CDSNFSeDetalhe.FieldByName('ALIQUOTA').AsFloat;

      // Valor do ISS calculado multiplicando-se a base de calculo pela aliquota
      ValorISS := Servico.Valores.BaseCalculo * Servico.Valores.Aliquota / 100;

      // A função RoundTo5 é usada para arredondar valores, sendo que o segundo
      // parametro se refere ao numero de casas decimais.
      // exemplos: RoundTo5(50.532, -2) ==> 50.53
      // exemplos: RoundTo5(50.535, -2) ==> 50.54
      // exemplos: RoundTo5(50.536, -2) ==> 50.54

      Servico.Valores.ValorIss := RoundTo5(ValorISS, -2);

      Servico.Valores.ValorLiquidoNfse := Servico.Valores.ValorServicos -
                                          Servico.Valores.ValorPis -
                                          Servico.Valores.ValorCofins -
                                          Servico.Valores.ValorInss -
                                          Servico.Valores.ValorIr -
                                          Servico.Valores.ValorCsll -
                                          Servico.Valores.OutrasRetencoes -
                                          Servico.Valores.ValorIssRetido -
                                          Servico.Valores.DescontoIncondicionado -
                                          Servico.Valores.DescontoCondicionado;

      // TnfseResponsavelRetencao = ( ptTomador, rtPrestador );
      Servico.ResponsavelRetencao := ptTomador;

      /// EXERCICIO
      ///  Pegue o valor da lista de serviço de acordo com o que foi inserido pelo usuário na grid
      Servico.ItemListaServico    := '01.01';

      // Para o provedor ISS.NET em ambiente de Homologação
      // o Codigo CNAE tem que ser '6511102'
      // Servico.CodigoCnae                := '123'; // Informação Opcional
      Servico.CodigoTributacaoMunicipio := '010100188';
      Servico.Discriminacao             := CDSNFSeDetalhe.FieldByName('DISCRIMINACAO').AsString;

      // Para o provedor ISS.NET em ambiente de Homologação
      // o Codigo do Municipio tem que ser '999'
      /// EXERCICIO
      ///  Pegue o código da cidade a partir da empresa que está na sessão
      Servico.CodigoMunicipio := '3106200';

      // Informar A Exigibilidade ISS para fintelISS [1/2/3/4/5/6/7]
      Servico.ExigibilidadeISS := exiExigivel;

      // Informar para Saatri
      Servico.CodigoPais := 1058; // Brasil
      Servico.MunicipioIncidencia := StrToIntDef('3106200', 0);

     // Somente o provedor SimplISS permite infomar mais de 1 serviço
      with Servico.ItemServico.Add do
      begin
        Descricao     := CDSNFSeDetalhe.FieldByName('DISCRIMINACAO').AsString;
        Quantidade    := 1;
        ValorUnitario := CDSNFSeDetalhe.FieldByName('VALOR_SERVICOS').AsFloat;
       end;

      Prestador.Cnpj               := Sessao.Empresa.Cnpj;
      Prestador.InscricaoMunicipal := '10127260010'; // Inscrição Municipal da T2Ti criada em Belo Horizonte apenas para testes

      // Para o provedor ISSDigital deve-se informar também:
      Prestador.Senha        := 'senha';
      Prestador.FraseSecreta := 'frase secreta';
      Prestador.cUF          := 33;

      PrestadorServico.Endereco.CodigoMunicipio := '3106200';
      PrestadorServico.RazaoSocial := Sessao.Empresa.RazaoSocial;

      Tomador.IdentificacaoTomador.CpfCnpj            := '11111111111';
      //     Tomador.IdentificacaoTomador.InscricaoMunicipal := '10127260010';

      Tomador.RazaoSocial := 'TESTE PESSOA FISICA';

      Tomador.Endereco.Endereco        := 'RUA PRINCIPAL';
      Tomador.Endereco.Numero          := '100';
      Tomador.Endereco.Complemento     := 'APTO 11';
      Tomador.Endereco.Bairro          := 'CENTRO';
      Tomador.Endereco.CodigoMunicipio := '3106200';
      Tomador.Endereco.UF              := 'MG';
      Tomador.Endereco.CodigoPais      := 1058; // Brasil
      Tomador.Endereco.CEP             := '71939-720';
	    //Provedor Equiplano é obrigatório o pais e IE
      Tomador.Endereco.xPais           := 'BRASIL';
      Tomador.IdentificacaoTomador.InscricaoEstadual := '123456';

      Tomador.Contato.Telefone := '1122223333';
      Tomador.Contato.Email    := 'nome@provedor.com.br';

      // Usado quando houver um intermediario na prestação do serviço
      //     IntermediarioServico.RazaoSocial        := 'razao';
      //     IntermediarioServico.CpfCnpj            := '00000000000';
      //     IntermediarioServico.InscricaoMunicipal := '12547478';


      // Usado quando o serviço for uma obra
      //     ConstrucaoCivil.CodigoObra := '88888';
      //     ConstrucaoCivil.Art        := '433';

    end;
  end;
   ACBrNFSe1.Enviar(1);
end;

procedure TFNFSe.ActionIncluirIntermediarioExecute(Sender: TObject);
begin
  /// EXERCICIO
  ///  Implemente a inclusão do intermediário
end;

procedure TFNFSe.ActionSelecionarItemListaServicoExecute(Sender: TObject);
begin
  try
    PopulaCamposTransientesLookup(TNfseListaServicoVO, TNfseListaServicoController);
    if CDSTransiente.RecordCount > 0 then
    begin
      CDSNFSeDetalhe.Append;
      CDSNFSeDetalhe.FieldByName('ID_NFSE_LISTA_SERVICO').AsInteger := CDSTransiente.FieldByName('ID').AsInteger;
      CDSNFSeDetalhe.FieldByName('VALOR_SERVICOS').AsFloat := 10;
      CDSNFSeDetalhe.FieldByName('VALOR_BASE_CALCULO').AsFloat := CDSNFSeDetalhe.FieldByName('VALOR_SERVICOS').AsFloat
                                                                - CDSNFSeDetalhe.FieldByName('VALOR_DEDUCOES').AsFloat
                                                                - CDSNFSeDetalhe.FieldByName('VALOR_DESCONTO_INCONDICIONADO').AsFloat;
      CDSNFSeDetalhe.FieldByName('ALIQUOTA').AsFloat := 2;
      CDSNFSeDetalhe.FieldByName('VALOR_ISS').AsFloat := CDSNFSeDetalhe.FieldByName('VALOR_BASE_CALCULO').AsFloat
                                                       * CDSNFSeDetalhe.FieldByName('ALIQUOTA').AsFloat / 100;
      CDSNFSeDetalhe.Post;
    end;
  finally
    CDSTransiente.Close;
  end;
end;

procedure TFNFSe.ACBrNFSe1StatusChange(Sender: TObject);
begin
 case ACBrNFSe1.Status of
  stNFSeIdle : begin
            if ( frmStatus <> nil ) then frmStatus.Hide;
           end;
  stNFSeRecepcao : begin
                   if ( frmStatus = nil )
                    then frmStatus := TfrmStatus.Create(Application);
                   frmStatus.lblStatus.Caption := 'Enviando dados da NFSe...';
                   frmStatus.Show;
                   frmStatus.BringToFront;
                  end;
  stNFSeConsultaSituacao : begin
                             if ( frmStatus = nil ) then
                               frmStatus := TfrmStatus.Create(Application);
                             frmStatus.lblStatus.Caption := 'Consultando a Situação...';
                             frmStatus.Show;
                             frmStatus.BringToFront;
                           end;
  stNFSeConsulta : begin
                   if ( frmStatus = nil )
                    then frmStatus := TfrmStatus.Create(Application);
                   frmStatus.lblStatus.Caption := 'Consultando...';
                   frmStatus.Show;
                   frmStatus.BringToFront;
                  end;
  stNFSeCancelamento : begin
                       if ( frmStatus = nil )
                        then frmStatus := TfrmStatus.Create(Application);
                       frmStatus.lblStatus.Caption := 'Enviando cancelamento de NFSe...';
                       frmStatus.Show;
                       frmStatus.BringToFront;
                      end;
  stNFSeEmail : begin
                if ( frmStatus = nil )
                 then frmStatus := TfrmStatus.Create(Application);
                frmStatus.lblStatus.Caption := 'Enviando Email...';
                frmStatus.Show;
                frmStatus.BringToFront;
               end;
 end;
 Application.ProcessMessages;
end;

/// EXERCICIO
///  Migre a função para a Biblioteca

// Função criada para arredondar valores quando a n Casa for maior ou igual a 5
// pois a função RoundTo arredonda quando a n Casa for maior ou igual a 6
function TFNFSe.RoundTo5(Valor: Double; Casas: Integer): Double;
var
 xValor, xDecimais: String;
 p, nCasas: Integer;
 nValor: Double;
begin
 nValor := Valor;
 xValor := Trim(FloatToStr(Valor));
 p      := pos(',', xValor);
 if Casas < 0
  then nCasas := - Casas
  else nCasas := Casas;
 if p > 0
  then begin
   xDecimais := Copy(xValor, p + 1, length(xValor));
   if length(xDecimais) > nCasas
    then begin
     if xDecimais[nCasas + 1] >= '5'
      then SetRoundMode(rmUP)
      else SetRoundMode(rmNearest);
    end;
   nValor := RoundTo(Valor, Casas);
  end;
 Result := nValor;
end;

{$ENDREGION}

end.
